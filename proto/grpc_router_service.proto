syntax = "proto3";

package grpcrouter;


option java_package = "com.grpcrouter.service";
option java_multiple_files = true;


service GRPCRouterService {

    // Register a service endpoint
    //
    // Called by a service that wants to advertise its services to clients.
    // Provides a service_id which ideally should be a dot separated namespace representing
    // the service but it can be anything, e.g.: org.suborg.scope1.service1
    // It also has information about how clients can connect directly to the service (ie host/port)
    // The service gets back a service_token which it can use to communicate with the grpc router.
    rpc RegisterService(ServiceRegistrationRequest) returns (ServiceRegistrationResponse) {}

    // Deregister a service endpoint
    //
    // Called by a service when it exits and it no longer serves client requests.
    // The service should pass its service_token which was obtained at registration.
    rpc DeregisterService(ServiceDeregistrationRequest) returns (ServiceDeregistrationResponse) {}

    // Get the detail of a service
    //
    // Returns the details of a registered service when called by a client.
    // The client then can connect directly to that service.
    // The client specifies the service_id which is service register for.
    // When multiple services are registered for the same service_id, they are returned in a simple
    // round-robin fashion.
    rpc GetRegisteredService(GetRegisteredServiceRequest) returns (GetRegisteredServiceResponse) {}

}


message ServiceEndpoint {
    string host = 1;  // hostname of the service
    int32 port = 2;  // port of the service
}


message ServiceMetadata {
    string region = 1;
    int32 slots = 2;
}

message ServiceRegistrationRequest {
    string service_id = 1;  // identifier of the service that the clients will use
    ServiceEndpoint endpoint = 2;
    ServiceMetadata metadata = 3;
}


message ServiceRegistrationResponse {
    string service_token = 1;
}


message ServiceDeregistrationRequest {
    string service_id = 1;
    string service_token = 2;
}


message ServiceDeregistrationResponse {
}

message ServiceHints {
    string region = 1;
}

message GetRegisteredServiceRequest {
    string service_id = 1;
    ServiceHints hints = 2;
}


message GetRegisteredServiceResponse {
    string service_id = 1;
    ServiceEndpoint endpoint = 2;
}
